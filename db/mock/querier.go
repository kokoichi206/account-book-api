// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kokoichi206/account-book-api/db/sqlc (interfaces: Querier)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	db "github.com/kokoichi206/account-book-api/db/sqlc"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockQuerier) CreateCategory(arg0 context.Context, arg1 string) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", arg0, arg1)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockQuerierMockRecorder) CreateCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockQuerier)(nil).CreateCategory), arg0, arg1)
}

// CreateExpense mocks base method.
func (m *MockQuerier) CreateExpense(arg0 context.Context, arg1 db.CreateExpenseParams) (db.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExpense", arg0, arg1)
	ret0, _ := ret[0].(db.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExpense indicates an expected call of CreateExpense.
func (mr *MockQuerierMockRecorder) CreateExpense(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExpense", reflect.TypeOf((*MockQuerier)(nil).CreateExpense), arg0, arg1)
}

// CreateFoodContent mocks base method.
func (m *MockQuerier) CreateFoodContent(arg0 context.Context, arg1 db.CreateFoodContentParams) (db.FoodContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFoodContent", arg0, arg1)
	ret0, _ := ret[0].(db.FoodContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFoodContent indicates an expected call of CreateFoodContent.
func (mr *MockQuerierMockRecorder) CreateFoodContent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFoodContent", reflect.TypeOf((*MockQuerier)(nil).CreateFoodContent), arg0, arg1)
}

// CreateFoodReceipt mocks base method.
func (m *MockQuerier) CreateFoodReceipt(arg0 context.Context, arg1 string) (db.FoodReceipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFoodReceipt", arg0, arg1)
	ret0, _ := ret[0].(db.FoodReceipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFoodReceipt indicates an expected call of CreateFoodReceipt.
func (mr *MockQuerierMockRecorder) CreateFoodReceipt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFoodReceipt", reflect.TypeOf((*MockQuerier)(nil).CreateFoodReceipt), arg0, arg1)
}

// CreateFoodReceiptContent mocks base method.
func (m *MockQuerier) CreateFoodReceiptContent(arg0 context.Context, arg1 db.CreateFoodReceiptContentParams) (db.FoodReceiptContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFoodReceiptContent", arg0, arg1)
	ret0, _ := ret[0].(db.FoodReceiptContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFoodReceiptContent indicates an expected call of CreateFoodReceiptContent.
func (mr *MockQuerierMockRecorder) CreateFoodReceiptContent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFoodReceiptContent", reflect.TypeOf((*MockQuerier)(nil).CreateFoodReceiptContent), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockQuerier) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockQuerierMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockQuerier)(nil).CreateSession), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockQuerier) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerier)(nil).CreateUser), arg0, arg1)
}

// DeleteSession mocks base method.
func (m *MockQuerier) DeleteSession(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockQuerierMockRecorder) DeleteSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockQuerier)(nil).DeleteSession), arg0, arg1)
}

// GetFoodContent mocks base method.
func (m *MockQuerier) GetFoodContent(arg0 context.Context, arg1 int64) (db.FoodContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFoodContent", arg0, arg1)
	ret0, _ := ret[0].(db.FoodContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFoodContent indicates an expected call of GetFoodContent.
func (mr *MockQuerierMockRecorder) GetFoodContent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFoodContent", reflect.TypeOf((*MockQuerier)(nil).GetFoodContent), arg0, arg1)
}

// GetFoodReceipt mocks base method.
func (m *MockQuerier) GetFoodReceipt(arg0 context.Context, arg1 int64) (db.FoodReceipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFoodReceipt", arg0, arg1)
	ret0, _ := ret[0].(db.FoodReceipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFoodReceipt indicates an expected call of GetFoodReceipt.
func (mr *MockQuerierMockRecorder) GetFoodReceipt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFoodReceipt", reflect.TypeOf((*MockQuerier)(nil).GetFoodReceipt), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockQuerier) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockQuerierMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockQuerier)(nil).GetSession), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockQuerier) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockQuerierMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockQuerier)(nil).GetUser), arg0, arg1)
}

// ListExpenses mocks base method.
func (m *MockQuerier) ListExpenses(arg0 context.Context, arg1 int64) ([]db.ListExpensesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExpenses", arg0, arg1)
	ret0, _ := ret[0].([]db.ListExpensesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExpenses indicates an expected call of ListExpenses.
func (mr *MockQuerierMockRecorder) ListExpenses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExpenses", reflect.TypeOf((*MockQuerier)(nil).ListExpenses), arg0, arg1)
}

// ListFoodReceiptContents mocks base method.
func (m *MockQuerier) ListFoodReceiptContents(arg0 context.Context, arg1 int64) ([]db.ListFoodReceiptContentsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFoodReceiptContents", arg0, arg1)
	ret0, _ := ret[0].([]db.ListFoodReceiptContentsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFoodReceiptContents indicates an expected call of ListFoodReceiptContents.
func (mr *MockQuerierMockRecorder) ListFoodReceiptContents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFoodReceiptContents", reflect.TypeOf((*MockQuerier)(nil).ListFoodReceiptContents), arg0, arg1)
}

// UpdateSession mocks base method.
func (m *MockQuerier) UpdateSession(arg0 context.Context, arg1 db.UpdateSessionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSession indicates an expected call of UpdateSession.
func (mr *MockQuerierMockRecorder) UpdateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSession", reflect.TypeOf((*MockQuerier)(nil).UpdateSession), arg0, arg1)
}
