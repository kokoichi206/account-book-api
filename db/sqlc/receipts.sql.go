// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: receipts.sql

package db

import (
	"context"
)

const createFoodContent = `-- name: CreateFoodContent :one
INSERT INTO food_contents (
	name,
	calories,
	lipid,
	carbohydrate,
	Protein
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, name, calories, lipid, carbohydrate, protein
`

type CreateFoodContentParams struct {
	Name         string  `json:"name"`
	Calories     float32 `json:"calories"`
	Lipid        float32 `json:"lipid"`
	Carbohydrate float32 `json:"carbohydrate"`
	Protein      float32 `json:"protein"`
}

func (q *Queries) CreateFoodContent(ctx context.Context, arg CreateFoodContentParams) (FoodContent, error) {
	row := q.db.QueryRowContext(ctx, createFoodContent,
		arg.Name,
		arg.Calories,
		arg.Lipid,
		arg.Carbohydrate,
		arg.Protein,
	)
	var i FoodContent
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Calories,
		&i.Lipid,
		&i.Carbohydrate,
		&i.Protein,
	)
	return i, err
}

const createFoodReceipt = `-- name: CreateFoodReceipt :one
INSERT INTO food_receipts (
	store_name
) VALUES (
	$1
) RETURNING id, store_name
`

func (q *Queries) CreateFoodReceipt(ctx context.Context, storeName string) (FoodReceipt, error) {
	row := q.db.QueryRowContext(ctx, createFoodReceipt, storeName)
	var i FoodReceipt
	err := row.Scan(&i.ID, &i.StoreName)
	return i, err
}

const createFoodReceiptContent = `-- name: CreateFoodReceiptContent :one
INSERT INTO food_receipt_contents (
	food_receipt_id,
	food_content_id,
	amount
) VALUES (
  $1, $2, $3
) RETURNING id, food_receipt_id, food_content_id, amount
`

type CreateFoodReceiptContentParams struct {
	FoodReceiptID int64 `json:"food_receipt_id"`
	FoodContentID int64 `json:"food_content_id"`
	Amount        int64 `json:"amount"`
}

func (q *Queries) CreateFoodReceiptContent(ctx context.Context, arg CreateFoodReceiptContentParams) (FoodReceiptContent, error) {
	row := q.db.QueryRowContext(ctx, createFoodReceiptContent, arg.FoodReceiptID, arg.FoodContentID, arg.Amount)
	var i FoodReceiptContent
	err := row.Scan(
		&i.ID,
		&i.FoodReceiptID,
		&i.FoodContentID,
		&i.Amount,
	)
	return i, err
}

const getFoodContent = `-- name: GetFoodContent :one
SELECT id, name, calories, lipid, carbohydrate, protein FROM food_contents
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFoodContent(ctx context.Context, id int64) (FoodContent, error) {
	row := q.db.QueryRowContext(ctx, getFoodContent, id)
	var i FoodContent
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Calories,
		&i.Lipid,
		&i.Carbohydrate,
		&i.Protein,
	)
	return i, err
}

const getFoodReceipt = `-- name: GetFoodReceipt :one
SELECT id, store_name FROM food_receipts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFoodReceipt(ctx context.Context, id int64) (FoodReceipt, error) {
	row := q.db.QueryRowContext(ctx, getFoodReceipt, id)
	var i FoodReceipt
	err := row.Scan(&i.ID, &i.StoreName)
	return i, err
}

const listFoodReceiptContents = `-- name: ListFoodReceiptContents :many
SELECT
	food_receipt_contents.food_receipt_id AS food_receipt_id,
	food_receipt_contents.food_content_id AS food_content_id,
	food_receipt_contents.amount AS amount,
	food_contents.name AS name,
	food_contents.calories AS calories,
	food_contents.lipid AS lipid,
	food_contents.carbohydrate AS carbohydrate,
	food_contents.protein AS protein
FROM food_receipt_contents
INNER JOIN food_contents ON food_receipt_contents.food_content_id = food_contents.id
WHERE food_receipt_contents.food_receipt_id = $1
`

type ListFoodReceiptContentsRow struct {
	FoodReceiptID int64   `json:"food_receipt_id"`
	FoodContentID int64   `json:"food_content_id"`
	Amount        int64   `json:"amount"`
	Name          string  `json:"name"`
	Calories      float32 `json:"calories"`
	Lipid         float32 `json:"lipid"`
	Carbohydrate  float32 `json:"carbohydrate"`
	Protein       float32 `json:"protein"`
}

func (q *Queries) ListFoodReceiptContents(ctx context.Context, foodReceiptID int64) ([]ListFoodReceiptContentsRow, error) {
	rows, err := q.db.QueryContext(ctx, listFoodReceiptContents, foodReceiptID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListFoodReceiptContentsRow{}
	for rows.Next() {
		var i ListFoodReceiptContentsRow
		if err := rows.Scan(
			&i.FoodReceiptID,
			&i.FoodContentID,
			&i.Amount,
			&i.Name,
			&i.Calories,
			&i.Lipid,
			&i.Carbohydrate,
			&i.Protein,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
