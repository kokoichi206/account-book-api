// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: sessions.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
	id,
	user_id,
	user_agent,
	client_ip,
	expires_at
) VALUES (
	$1, $2, $3, $4, $5
) RETURNING id, user_id, user_agent, client_ip, created_at, expires_at
`

type CreateSessionParams struct {
	ID        uuid.UUID `json:"id"`
	UserID    int64     `json:"user_id"`
	UserAgent string    `json:"user_agent"`
	ClientIp  string    `json:"client_ip"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.UserAgent,
		arg.ClientIp,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.UserAgent,
		&i.ClientIp,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
UPDATE sessions
SET expires_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_id, user_agent, client_ip, created_at, expires_at
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, user_agent, client_ip, created_at, expires_at FROM sessions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.UserAgent,
		&i.ClientIp,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const updateSession = `-- name: UpdateSession :exec
UPDATE sessions
SET expires_at = $1
WHERE id = $2
RETURNING id, user_id, user_agent, client_ip, created_at, expires_at
`

type UpdateSessionParams struct {
	ExpiresAt time.Time `json:"expires_at"`
	ID        uuid.UUID `json:"id"`
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) error {
	_, err := q.db.ExecContext(ctx, updateSession, arg.ExpiresAt, arg.ID)
	return err
}
