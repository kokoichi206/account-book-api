// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: expenses.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createExpense = `-- name: CreateExpense :one
INSERT INTO expenses (
	user_id,
	category_id,
	amount,
	food_receipt_id,
	comment
) VALUES (
	$1,
	$2,
	$3,
	$4,
	$5
) RETURNING id, user_id, category_id, amount, food_receipt_id, comment, created_at
`

type CreateExpenseParams struct {
	UserID        int64          `json:"user_id"`
	CategoryID    int64          `json:"category_id"`
	Amount        int64          `json:"amount"`
	FoodReceiptID sql.NullInt64  `json:"food_receipt_id"`
	Comment       sql.NullString `json:"comment"`
}

func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) (Expense, error) {
	row := q.db.QueryRowContext(ctx, createExpense,
		arg.UserID,
		arg.CategoryID,
		arg.Amount,
		arg.FoodReceiptID,
		arg.Comment,
	)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CategoryID,
		&i.Amount,
		&i.FoodReceiptID,
		&i.Comment,
		&i.CreatedAt,
	)
	return i, err
}

const listExpenses = `-- name: ListExpenses :many
SELECT
	expenses.id AS id,
	expenses.user_id AS user_id,
	expenses.category_id AS category_id,
	expenses.amount AS amount,
	CASE
		WHEN food_receipts.store_name IS NULL then ''
		ELSE food_receipts.store_name
	END AS store_name,
	expenses.comment AS comment,
	expenses.created_at AS created_at
FROM expenses
LEFT OUTER JOIN food_receipts ON expenses.food_receipt_id = food_receipts.id
INNER JOIN categories ON expenses.category_id = categories.id
WHERE expenses.user_id = $1
`

type ListExpensesRow struct {
	ID         int64          `json:"id"`
	UserID     int64          `json:"user_id"`
	CategoryID int64          `json:"category_id"`
	Amount     int64          `json:"amount"`
	StoreName  interface{}    `json:"store_name"`
	Comment    sql.NullString `json:"comment"`
	CreatedAt  time.Time      `json:"created_at"`
}

func (q *Queries) ListExpenses(ctx context.Context, userID int64) ([]ListExpensesRow, error) {
	rows, err := q.db.QueryContext(ctx, listExpenses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListExpensesRow{}
	for rows.Next() {
		var i ListExpensesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CategoryID,
			&i.Amount,
			&i.StoreName,
			&i.Comment,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
